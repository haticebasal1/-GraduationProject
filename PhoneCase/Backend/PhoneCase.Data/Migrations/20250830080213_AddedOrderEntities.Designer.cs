// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhoneCase.Data;

#nullable disable

namespace PhoneCase.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250830080213_AddedOrderEntities")]
    partial class AddedOrderEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "030acc04-b2c4-4887-9085-e37fd9f498b7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "50a60653-cfab-4d55-8db0-0c0328515dd6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9309f4e0-4338-4af3-bf2b-fb9b1a2061f7",
                            RoleId = "030acc04-b2c4-4887-9085-e37fd9f498b7"
                        },
                        new
                        {
                            UserId = "7dd21677-49a5-4d13-9006-dc909993c4b9",
                            RoleId = "50a60653-cfab-4d55-8db0-0c0328515dd6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 818, DateTimeKind.Unspecified).AddTicks(1560), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "9309f4e0-4338-4af3-bf2b-fb9b1a2061f7"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 818, DateTimeKind.Unspecified).AddTicks(1570), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "7dd21677-49a5-4d13-9006-dc909993c4b9"
                        });
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2280), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Esnek ve darbe emici silikon telefon kılıfları",
                            ImageUrl = "categories/silikon.png",
                            IsDeleted = false,
                            Name = "Silikon Kılıflar",
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2280), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Şık ve profesyonel görünümlü hakiki ve suni deri kılıflar",
                            ImageUrl = "categories/deri.png",
                            IsDeleted = false,
                            Name = "Deri Kılıflar",
                            Type = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2280), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Telefonun orijinal tasarımını gösteren şeffaf koruma kılıfları",
                            ImageUrl = "categories/seffaf.png",
                            IsDeleted = true,
                            Name = "Şeffaf Kılıflar",
                            Type = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2280), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Kart ve nakit bölmeli, çok fonksiyonlu telefon kılıfları",
                            ImageUrl = "categories/cuzdanli.png",
                            IsDeleted = false,
                            Name = "Cüzdanlı Kılıflar",
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2280), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Telefonun hem önünü hem arkasını kaplayan tam koruma sağlayan kılıflar",
                            ImageUrl = "categories/tam-koruma.png",
                            IsDeleted = true,
                            Name = "Tam Koruma (360) Kılıflar",
                            Type = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2280), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Kişiye özel ve çeşitli desenlere sahip kılıflar",
                            ImageUrl = "categories/desenli.png",
                            IsDeleted = false,
                            Name = "Baskılı & Desenli Kılıflar",
                            Type = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2280), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Polikarbonat gibi sert malzemelerden yapılmış, çizilmelere karşı dayanıklı kılıflar",
                            ImageUrl = "categories/sert-kapak.png",
                            IsDeleted = true,
                            Name = "Sert Kapak (Hard Case) Kılıflar",
                            Type = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2290), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Dahili bataryası ile telefonunuzu şarj edebilen kılıflar",
                            ImageUrl = "categories/bataryali.png",
                            IsDeleted = false,
                            Name = "Bataryalı Kılıflar",
                            Type = 3,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2290), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Boyuna veya omuza asmak için askı aparatlı telefon kılıfları",
                            ImageUrl = "categories/askili.png",
                            IsDeleted = true,
                            Name = "Askılı Kılıflar",
                            Type = 2,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(2290), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Su altı kullanımı ve sıvı temaslarına karşı koruma sağlayan özel kılıflar",
                            ImageUrl = "categories/su-gecirmez.png",
                            IsDeleted = false,
                            Name = "Su Geçirmez Kılıflar",
                            Type = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId1");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5140), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15-silikon-siyah.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Mat Siyah Silikon Kılıf",
                            Price = 250m,
                            Properties = "Kaymaz yüzeyli, parmak izi bırakmayan mat silikon koruma.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5140), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s24-silikon-mavi.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S24 Pastel Mavi Silikon Kılıf",
                            Price = 220m,
                            Properties = "Canlı renkte, darbelere karşı esnek ve tam koruma sağlayan kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/pixel8pro-silikon-lacivert.png",
                            IsDeleted = true,
                            IsHome = false,
                            Name = "Google Pixel 8 Pro MagSafe Uyumlu Lacivert Silikon Kılıf",
                            Price = 350m,
                            Properties = "Magsafe aksesuarlarıyla uyumlu, mıknatıslı ve şık tasarım.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi13t-silikon-yesil.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 13T Kamera Korumalı Yeşil Silikon Kılıf",
                            Price = 280m,
                            Properties = "Sürgülü kamera koruyucusu ile lenslerinizi güvende tutar.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone14pro-silikon-mor.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 14 Pro Şeffaf Kenarlı Mor Silikon Kılıf",
                            Price = 260m,
                            Properties = "Telefonun rengini gösteren şeffaf sırt ve renkli kenarlar.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15pro-deri-taba.png",
                            IsDeleted = true,
                            IsHome = false,
                            Name = "iPhone 15 Pro Hakiki Deri Taba Rengi Kılıf",
                            Price = 750m,
                            Properties = "Zamanla güzelleşen, premium hakiki deri malzemeden üretilmiştir.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s24ultra-deri-siyah.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S24 Ultra Siyah Suni Deri Kılıf",
                            Price = 550m,
                            Properties = "Profesyonel görünüm sunan, kaliteli ve dayanıklı suni deri.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15-deri-kahve.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Mıknatıslı Kahverengi Deri Kılıf",
                            Price = 600m,
                            Properties = "Güçlü mıknatıslı kapak ve şık dikiş detayları.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/pixel8-deri-bordo.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Google Pixel 8 Bordo Deri Kılıf",
                            Price = 620m,
                            Properties = "Telefona tam oturan, zarif ve ince yapılı deri kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi14pro-deri-mavi.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 14 Pro Mavi Deri Kılıf",
                            Price = 580m,
                            Properties = "Modern ve şık bir görünüm için mavi renkli deri kaplama.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15-seffaf.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Sararmaz Şeffaf Kılıf",
                            Price = 300m,
                            Properties = "Uzun süreli kullanımlarda sararmaya karşı dayanıklı özel malzeme.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5150), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s23fe-seffaf.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S23 FE Köşe Korumalı Şeffaf Kılıf",
                            Price = 240m,
                            Properties = "Düşmelere karşı ekstra koruma için güçlendirilmiş köşeler.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi13lite-seffaf.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 13 Lite İnce Şeffaf Kılıf",
                            Price = 190m,
                            Properties = "Telefonun orijinal inceliğini koruyan ultra ince tasarım.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone13-seffaf-standli.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 13 Standlı Şeffaf Kılıf",
                            Price = 320m,
                            Properties = "Video izlemek için entegre stand aparatlı şeffaf kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/samsung-a54-seffaf-magsafe.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung A54 MagSafe Uyumlu Şeffaf Kılıf",
                            Price = 350m,
                            Properties = "Şeffaf tasarım ve MagSafe uyumluluğu bir arada.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15promax-cuzdanli.png",
                            IsDeleted = true,
                            IsHome = false,
                            Name = "iPhone 15 Pro Max Siyah Deri Cüzdanlı Kılıf",
                            Price = 650m,
                            Properties = "3 kart bölmesi ve bir nakit cebi ile pratik kullanım.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s24-cuzdanli.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S24 Lacivert Cüzdan Kılıf",
                            Price = 580m,
                            Properties = "Telefonunuzu ve kartlarınızı bir arada tutan şık çözüm.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone14-cuzdanli-ayrilabilir.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 14 Kırmızı Ayrılabilir Cüzdanlı Kılıf",
                            Price = 720m,
                            Properties = "İsteğe bağlı olarak cüzdan kısmından ayrılabilen mıknatıslı yapı.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi13tpro-cuzdanli.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 13T Pro Yeşil Cüzdan Kılıf",
                            Price = 550m,
                            Properties = "Stand özelliği ve kartlık cepleri ile fonksiyonel tasarım.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s23-cuzdanli-mor.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S23 Mor Cüzdanlı Kılıf",
                            Price = 590m,
                            Properties = "Göz alıcı mor renkte, çok amaçlı cüzdan kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15-360.png",
                            IsDeleted = true,
                            IsHome = false,
                            Name = "iPhone 15 360 Tam Koruma Siyah Kılıf",
                            Price = 500m,
                            Properties = "Ekran koruyuculu ön kapak ve arka kapaktan oluşan tam gövde koruması.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s24ultra-360-askeri.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S24 Ultra Askeri Düzey Koruma Kılıfı",
                            Price = 650m,
                            Properties = "Zorlu şartlara ve düşmelere karşı askeri standartlarda koruma.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi14-360-seffaf.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 14 Şeffaf 360 Koruma Kılıf",
                            Price = 480m,
                            Properties = "Telefonun tasarımını gizlemeden 360 derece koruma sağlar.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone14pro-360-mavi.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 14 Pro Mavi Tam Koruma Kılıfı",
                            Price = 520m,
                            Properties = "Dahili ekran koruyuculu, toza ve çizilmelere dayanıklı kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/pixel7pro-360-zirhli.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Google Pixel 7 Pro Zırhlı Kılıf",
                            Price = 600m,
                            Properties = "Katmanlı yapı ve güçlendirilmiş tamponlarla maksimum koruma.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone14-desenli-mermer.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 14 Mermer Desenli Kılıf",
                            Price = 350m,
                            Properties = "Altın varaklı beyaz mermer deseni ile lüks bir görünüm.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/samsung-a54-desenli-cicek.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung A54 Çiçek Bahçesi Desenli Kılıf",
                            Price = 320m,
                            Properties = "Bahar renklerinde canlı çiçek desenleri.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi13-desenli-geometrik.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 13 Geometrik Desenli Kılıf",
                            Price = 300m,
                            Properties = "Modern ve minimalist geometrik şekillerle tasarlanmış kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15promax-desenli-galaksi.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Pro Max Galaksi Temalı Kılıf",
                            Price = 380m,
                            Properties = "Derin uzay ve galaksi temalı parlak baskılı kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s23ultra-desenli-kamuflaj.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S23 Ultra Kamuflaj Desenli Kılıf",
                            Price = 340m,
                            Properties = "Askeri kamuflaj desenli, maceracı ruhlar için.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15pro-sertkapak-siyah.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Pro İnce Siyah Sert Kapak",
                            Price = 280m,
                            Properties = "Polikarbonat malzemeden ultra ince ve hafif koruma.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s24-sertkapak-kumas.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S24 Gri Kumaş Dokulu Sert Kapak",
                            Price = 350m,
                            Properties = "Farklı bir dokunuş sunan, kumaş kaplamalı sert kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi14-sertkapak-mat.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 14 Şeffaf Mat Sert Kapak",
                            Price = 300m,
                            Properties = "Buzlu cam efekti veren yarı şeffaf mat sert kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/pixel8-sertkapak-karbon.png",
                            IsDeleted = true,
                            IsHome = false,
                            Name = "Google Pixel 8 Karbon Fiber Desenli Sert Kapak",
                            Price = 380m,
                            Properties = "Sportif ve teknolojik görünümlü karbon fiber desenli kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5180), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone13-sertkapak-kirmizi.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 13 Kırmızı Sert Kapak",
                            Price = 290m,
                            Properties = "Canlı kırmızı renkte, pürüzsüz yüzeyli sert koruma kapağı.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5180), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15pro-bataryali.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Pro 5000mAh Bataryalı Kılıf",
                            Price = 1200m,
                            Properties = "Günün sonunu getiremeyenler için ekstra 5000mAh güç.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5180), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s24ultra-bataryali.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S24 Ultra 6000mAh Bataryalı Kılıf",
                            Price = 1350m,
                            Properties = "Yoğun kullanımda bile şarj desteği sunan yüksek kapasiteli kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5180), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone14-bataryali-ince.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 14 4800mAh İnce Bataryalı Kılıf",
                            Price = 1100m,
                            Properties = "Telefonu çok kabalaştırmayan ince tasarımlı şarjlı kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5180), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/pixel8pro-bataryali.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Google Pixel 8 Pro 5500mAh Bataryalı Kılıf",
                            Price = 1250m,
                            Properties = "Pixel telefonunuz için tam gün ekstra kullanım imkanı.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5180), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15plus-bataryali-magsafe.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Plus 5000mAh MagSafe Uyumlu Bataryalı Kılıf",
                            Price = 1500m,
                            Properties = "Hem şarj eden hem de MagSafe aksesuarlarını destekleyen kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5180), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15-askili-orgu.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 15 Şeffaf Örgü Askılı Kılıf",
                            Price = 400m,
                            Properties = "Ayarlanabilir boyun askısı ile telefonunuzu güvenle taşıyın.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/samsung-a54-askili-deri.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung A54 Siyah Deri Askılı Kılıf",
                            Price = 450m,
                            Properties = "Şık deri askısı ve kart cebi bulunan fonksiyonel kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi13lite-askili-pembe.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 13 Lite Pembe İp Askılı Kılıf",
                            Price = 380m,
                            Properties = "Spor ve şık görünüm için renkli ip askılı silikon kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone14pro-askili-zincir.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 14 Pro Zincir Askılı Kılıf",
                            Price = 480m,
                            Properties = "Akşam kullanımı için şık metal zincir askılı kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s23-askili-boncuk.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S23 Renkli Boncuk Askılı Kılıf",
                            Price = 420m,
                            Properties = "Yaz ayları için ideal, el yapımı boncuk askılı şeffaf kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone15pro-sugecirmez.png",
                            IsDeleted = true,
                            IsHome = false,
                            Name = "iPhone 15 Pro IP68 Su Geçirmez Kılıf",
                            Price = 800m,
                            Properties = "2 metreye kadar su altında koruma sağlayan, IP68 sertifikalı kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/s24ultra-sugecirmez.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Samsung S24 Ultra Dalış Kılıfı",
                            Price = 850m,
                            Properties = "Plaj ve havuz kullanımı için tam koruma sağlayan su geçirmez kılıf.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5210), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/evrensel-sugecirmez.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "GoPro Uyumlu Evrensel Su Geçirmez Kılıf",
                            Price = 750m,
                            Properties = "Farklı telefon modelleriyle uyumlu, su altı çekimleri için ideal.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5210), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/iphone14-sugecirmez.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "iPhone 14 Toz ve Su Geçirmez Kılıf",
                            Price = 780m,
                            Properties = "Sadece suya değil, toza ve kara karşı da tam yalıtım.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5210), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ImageUrl = "products/xiaomi14pro-sugecirmez-samandira.png",
                            IsDeleted = false,
                            IsHome = false,
                            Name = "Xiaomi 14 Pro Şamandıralı Su Geçirmez Kılıf",
                            Price = 820m,
                            Properties = "Suda batmayan, şamandıralı yapısı ile ekstra güvenlik sağlar.",
                            UpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 39,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 39,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 40,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 40,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 41,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 41,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 42,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 42,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 43,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 43,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 44,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 45,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 46,
                            CategoryId = 10
                        },
                        new
                        {
                            ProductId = 46,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 47,
                            CategoryId = 10
                        },
                        new
                        {
                            ProductId = 47,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 48,
                            CategoryId = 10
                        },
                        new
                        {
                            ProductId = 49,
                            CategoryId = 10
                        },
                        new
                        {
                            ProductId = 49,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 50,
                            CategoryId = 10
                        },
                        new
                        {
                            ProductId = 50,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9309f4e0-4338-4af3-bf2b-fb9b1a2061f7",
                            AccessFailedCount = 0,
                            Address = "Bakırköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "567867e2-26e2-4fc4-990b-71b36dcdfb08",
                            Email = "testadmin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Defne",
                            Gender = 1,
                            LastName = "Yalçın",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTADMIN@EXAMPLE.COM",
                            NormalizedUserName = "TESTADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJu9pBrMwxELW3Xv3x2VTz99X8FjUZFGB0UpahKtwpsVkSkc69tB+VLPn1qNQXrQQg==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 735, DateTimeKind.Unspecified).AddTicks(5290), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "66a49e7c-b2d5-4ea4-948d-dd4751a617c9",
                            TwoFactorEnabled = false,
                            UserName = "testadmin"
                        },
                        new
                        {
                            Id = "7dd21677-49a5-4d13-9006-dc909993c4b9",
                            AccessFailedCount = 0,
                            Address = "Ataköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "5082d75e-af93-4685-b515-7195012f50db",
                            Email = "testuser@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alp",
                            Gender = 2,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTUSER@EXAMPLE.COM",
                            NormalizedUserName = "TESTUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAELPXHWGycixT2GhLBleutZJk7GruOGZn5IRZgGjheRD0HUZz/q2R+8kq6dCAPeoEBA==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTimeOffset(new DateTime(2025, 8, 30, 8, 2, 12, 777, DateTimeKind.Unspecified).AddTicks(8450), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "ecfadd3b-9e40-40f6-8de6-0ad787dfafa9",
                            TwoFactorEnabled = false,
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneCase.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Cart", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.CartItem", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneCase.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Favorite", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneCase.Entities.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Order", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.OrderItem", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneCase.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.ProductCategory", b =>
                {
                    b.HasOne("PhoneCase.Entities.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhoneCase.Entities.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PhoneCase.Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
